{"version":3,"sources":["utils/windowSize.ts","App.tsx","index.tsx"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","operations","App","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","Math","floor","numRows","numCols","generateEmptyGrid","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","console","log","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","style","display","alignItems","flexFlow","className","onClick","random","gridTemplateColumns","map","col","key","newGrid","backgroundColor","undefined","border","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63648237.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(\n        getWindowDimensions()\n    );\n\n    useEffect(() => {\n        function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []);\n\n    return windowDimensions;\n}","import React, { useCallback, useRef, useState } from \"react\";\nimport produce from \"immer\";\nimport useWindowDimensions from \"./utils/windowSize\";\nimport 'typeface-ibm-plex-mono';\nimport './App.css';\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nconst App: React.FC = () => {\n\n  const { width, height } = useWindowDimensions();\n\n  const [ numRows ] = useState(() => {\n    return Math.floor(height / 23)\n  });\n  const [ numCols ] = useState(() => {\n    return Math.floor(width / 21)\n  });\n\n  const generateEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));    \n    }\n\n    return rows;\n  }\n\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const btnStartStopHandler = () => {\n    setRunning(!running);\n    if (!running) {\n      runningRef.current = true;\n      runSimulation();\n    }\n  };\n\n  const btnRandomHandler = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(\n        Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n      );\n    }\n\n    setGrid(rows);\n  };\n\n  const btnClearHandler = () => {\n    setGrid(generateEmptyGrid());\n  };\n\n  const runSimulation = useCallback(() => {\n    console.log(\"runSimulation!\")\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      console.log(\"setGrid!\")\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }          \n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, [numCols, numRows]);\n\n  return (\n    <div style={{\n      display: \"flex\",\n      alignItems: \"center\",\n      flexFlow: \"column\"\n    }}>\n      <div style={{\n        display: \"block\"\n      }}>\n        <button\n          className=\"btn\"\n          onClick={btnStartStopHandler}\n        >\n          {running ? \"stop\" : \"start\"}\n        </button>\n        <button\n          className=\"btn\"\n          onClick={btnRandomHandler}\n        >\n          random\n        </button>\n        <button\n          className=\"btn\"\n          onClick={btnClearHandler}\n        >\n          clear\n        </button>\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \"#732d91\" : undefined,\n                border: \"solid 0.5px lightgray\"\n              }}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
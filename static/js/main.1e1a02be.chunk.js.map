{"version":3,"sources":["App.tsx","index.tsx"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","console","log","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","onClick","Math","random","style","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","document","getElementById"],"mappings":"4KAMMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAGDC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBF,GAgBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBT,KAgByB,kBAAM,MAG7C,OAAOH,GAgHMK,EA7GO,WAAO,IAAD,EAEFC,oBAAS,WAC/B,OAAOP,OAHiB,mBAEnBQ,EAFmB,KAEbC,EAFa,OAMIF,oBAAS,GANb,mBAMnBG,EANmB,KAMVC,EANU,KAQpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAChCC,QAAQC,IAAI,kBACPN,EAAWE,UAIhBL,GAAQ,SAAAU,GAEN,OADAF,QAAQC,IAAI,YACLE,YAAQD,GAAG,SAAAE,GAChB,IAD6B,IAAD,WACnBnB,GACP,IAF0B,eAEjBoB,GACP,IAAIC,EAAY,EAChBxB,EAAWyB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOzB,EAAIuB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EAjDf,IAiDiCC,GAAQ,GAAKA,EAhD9C,KAiDAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASnB,GAAGoB,GAAK,EACI,IAAZH,EAAEjB,GAAGoB,IAA0B,IAAdC,IAC1BF,EAASnB,GAAGoB,GAAK,IAbZA,EAAI,EAAGA,EA3CV,GA2CuBA,IAAM,EAA1BA,IADFpB,EAAI,EAAGA,EA3CR,GA2CqBA,IAAM,EAA1BA,SAqBb2B,WAAWd,EAAe,QACzB,IAEH,OACE,oCACE,4BACEe,QAAS,WACPb,QAAQC,IAAI,qBACZP,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,OAIHL,EAAU,OAAS,SAEtB,4BACEoB,QAAS,WAEP,IADA,IAAM7B,EAAO,GACJC,EAAI,EAAGA,EApFV,GAoFuBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MArFT,KAqFyB,kBAAO2B,KAAKC,SAAW,GAAM,EAAI,MAIhEvB,EAAQR,KATZ,UAcA,4BACE6B,QAAS,WACPrB,EAAQT,OAFZ,SAOA,yBACEiC,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAxGb,GAwGa,aAGpB3B,EAAK4B,KAAI,SAACnC,EAAMC,GAAP,OACRD,EAAKmC,KAAI,SAACC,EAAKf,GAAN,OACP,yBACEgB,IAAG,UAAKpC,EAAL,YAAUoB,GACbQ,QAAS,WACP,IAAMS,EAAUnB,YAAQZ,GAAM,SAAAa,GAC5BA,EAASnB,GAAGoB,GAAKd,EAAKN,GAAGoB,GAAK,EAAI,KAEpCb,EAAQ8B,IAEVN,MAAO,CACLO,MAAO,GACPC,OAAQ,GACRC,gBAAiBlC,EAAKN,GAAGoB,GAAK,WAAQqB,EACtCC,OAAQ,8BCzHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1e1a02be.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from \"react\";\nimport produce from \"immer\";\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));    \n  }\n\n  return rows;\n}\n\nconst App: React.FC = () => {\n\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    console.log(\"runSimulation!\")\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      console.log(\"setGrid!\")\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }          \n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          console.log(\"start/stop click!\")\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}\n      >\n        {running ? \"stop\" : \"start\"}\n      </button>\n      <button\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n            );\n          }\n\n          setGrid(rows);\n        }}\n      >\n        random\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n        }}\n      >\n        clear\n      </button>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \"red\" : undefined,\n                border: \"solid 1px black\"\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}